{"version":3,"sources":["components/Button.js","components/ButtonRow.js","data.js","components/ButtonTable.js","components/Display.js","Calculator.js","helpers/getResult.js","index.js"],"names":["Button","value","styles","handleSelectButton","className","onClick","ButtonRow","buttons","map","button","key","data","row","values","ButtonTable","rows","Display","initialValue","Calculator","useState","setInitialValue","addOperator","cats","length","e","isNaN","parseInt","target","innerText","calculate","digits","stackOperators","stackAux","total","flag","result","i","undefined","stOperator","pop","push","execPendingOperations","amountFormat","joinDigitsToString","join","replaceAll","formatChainDigitsToArr","chainDigits","j","parseFloat","charAt","slice","cleanLastOperator","valueOperator","valueNumber","rExpresion","_amountFormat","toFixed","replace","includes","getResult","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e5e49a7.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = ({ value, styles, handleSelectButton }) => {\r\n\r\n    return (\r\n        <>\r\n            <button\r\n                className={styles}\r\n                onClick={handleSelectButton}\r\n            >\r\n                {value}\r\n            </button>\r\n        </>\r\n    )\r\n};\r\n\r\nButton.propTypes = {\r\n    handleSelectButton: PropTypes.func.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    styles: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from \"./Button\";\r\n\r\nconst ButtonRow = ({ buttons = [], handleSelectButton }) => {\r\n\r\n    return (\r\n        <div className=\"button-row\">\r\n            {\r\n                buttons.map((button) => (\r\n                    <Button\r\n                        key={button.value}\r\n                        {...button}\r\n                        handleSelectButton={handleSelectButton}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nButtonRow.propTypes = {\r\n    handleSelectButton: PropTypes.func.isRequired,\r\n    buttons: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default ButtonRow;","export const data = [\r\n    {\r\n        row: 1,\r\n        values: [\r\n            {\r\n                value: '+',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '-',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: 'x',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '/',\r\n                styles: 'btn'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        row: 2,\r\n        values: [\r\n            {\r\n                value: '7',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '8',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '9',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '=',\r\n                styles: 'btn btn-blue'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        row: 3,\r\n        values: [\r\n            {\r\n                value: '4',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '5',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '6',\r\n                styles: 'btn'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        row: 4,\r\n        values: [\r\n            {\r\n                value: '1',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '2',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '3',\r\n                styles: 'btn'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        row: 5,\r\n        values: [\r\n            {\r\n                value: '0',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: ',',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: 'AC',\r\n                styles: 'btn btn-red'\r\n            }\r\n        ]\r\n    }\r\n];","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ButtonRow from './ButtonRow';\r\nimport { data as rows } from '../data';\r\n\r\nconst ButtonTable = ({ handleSelectButton }) => {\r\n\r\n    return (\r\n        <div className=\"button-table\">\r\n            {\r\n                rows.map(({ row, values }) => (\r\n                    <ButtonRow\r\n                        key={row}\r\n                        buttons={values}\r\n                        handleSelectButton={handleSelectButton}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nButtonTable.propTypes = {\r\n    handleSelectButton: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ButtonTable;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Display = ({ initialValue = [0] }) => {\r\n\r\n    return (\r\n        <div className='bg-display'>\r\n            <h1> {initialValue}</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nDisplay.propTypes = {\r\n    initialValue: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Display;","import React, { useState } from 'react';\r\n\r\nimport ButtonTable from './components/ButtonTable';\r\nimport Display from './components/Display';\r\nimport { getResult } from './helpers/getResult';\r\n\r\nconst Calculator = () => {\r\n\r\n    const [initialValue, setInitialValue] = useState([0]);\r\n\r\n    const handleSelectButton = (e) => {\r\n        const value = !isNaN(parseInt(e.target.innerText)) ?\r\n            parseInt(e.target.innerText) :\r\n            e.target.innerText;\r\n\r\n        switch (value) {\r\n            case '+':\r\n                addOperator(value);\r\n                break;\r\n            case '-':\r\n                addOperator(value);\r\n                break;\r\n            case 'x':\r\n                addOperator(value);\r\n                break;\r\n            case '/':\r\n                addOperator(value);\r\n                break;\r\n            case '=':\r\n                if (initialValue.length > 1) {\r\n                    setInitialValue(getResult(initialValue));\r\n                }\r\n                break;\r\n            case 'AC':\r\n                setInitialValue([0]);\r\n                break;\r\n            case ',':\r\n                addOperator(value);\r\n                break;\r\n            default:\r\n                setInitialValue((cats) => {\r\n                    return cats[0] === 0 ? [parseFloat(value)] : [...cats, parseFloat(value)];\r\n                });\r\n                break;\r\n        }\r\n\r\n    };\r\n\r\n    const addOperator = (value) => {\r\n        setInitialValue((cats) => {\r\n            if (cats[cats.length - 1] === '+' ||\r\n                cats[cats.length - 1] === '-' ||\r\n                cats[cats.length - 1] === 'x' ||\r\n                cats[cats.length - 1] === '/' ||\r\n                cats[cats.length - 1] === ',') return [...cats];\r\n\r\n            return cats[0] === 0 ||\r\n                cats[0] === '+' ||\r\n                cats[0] === '-' ||\r\n                cats[0] === 'x' ||\r\n                cats[0] === '/' ||\r\n                cats[0] === ',' ? [0] : [...cats, value];\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"calculator\">\r\n            <h2>Calculator</h2>\r\n            <Display initialValue={initialValue} />\r\n            <hr />\r\n            <ButtonTable handleSelectButton={handleSelectButton} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Calculator;","\r\nexport const getResult = (initialValue = []) => {\r\n\r\n    const calculate = (digits = []) => {\r\n        let stackOperators = [];\r\n        let stackAux = [];\r\n        let total = 0;\r\n        let flag = true;\r\n        let result = 0;\r\n        for (let i = 0; i < digits.length; i++) {\r\n            flag = true;\r\n\r\n            if (!isNaN(digits[i])) {\r\n\r\n                if (isNaN(digits[i + 1]) && digits[i + 1] !== undefined) {\r\n                    result = 0;\r\n                   \r\n                    if (stackOperators[stackOperators.length - 1] !== undefined) {\r\n\r\n                        const stOperator = stackOperators[stackOperators.length - 1];\r\n\r\n                        if ((stOperator === '+' || stOperator === '-') && (digits[i + 1] === '+' || digits[i + 1] === '-')) {\r\n\r\n                            if (stOperator === '+') {\r\n                                result = total + digits[i];\r\n                            } else {\r\n                                result = total - digits[i];\r\n                            }\r\n\r\n                            flag = false;\r\n                            stackOperators.pop();\r\n                        } else if (stOperator === 'x' || stOperator === '/') {\r\n\r\n                            if (stOperator === 'x') {\r\n                                result = total * digits[i];\r\n                            } else {\r\n                                result = total / digits[i];\r\n                            }\r\n\r\n                            flag = false;\r\n                            stackOperators.pop();\r\n                        } else {\r\n                            stackAux.push(total);\r\n                        }\r\n                    }\r\n\r\n                    stackOperators.push(digits[i + 1]);\r\n\r\n                    if (flag) {\r\n                        total = digits[i];\r\n                    } else {\r\n                        total = result;\r\n                    }\r\n\r\n                    i++;\r\n                    if (digits.length > i) {\r\n                        continue;\r\n                    }\r\n                    \r\n                } else {\r\n\r\n                    total = digits[i - 1] === '+' ? total + digits[i] :\r\n                            digits[i - 1] === '-' ? total - digits[i] :\r\n                            digits[i - 1] === 'x' ? total * digits[i] :\r\n                            digits[i - 1] === '/' ? total / digits[i] :\r\n                            total;\r\n\r\n                    stackOperators.pop();\r\n                }\r\n\r\n                total = execPendingOperations(stackAux, stackOperators, total);\r\n            }\r\n        }\r\n\r\n        return [\r\n            amountFormat(total)\r\n        ];\r\n    };\r\n\r\n    const joinDigitsToString = (initialValue) => {\r\n        return initialValue.join('')\r\n            .replaceAll('.', '')\r\n            .replaceAll(\",\", \".\");\r\n    };\r\n\r\n    const formatChainDigitsToArr = (chainDigits) => {\r\n        const result = [];\r\n        for (let i = 0, j = 0; i < chainDigits.length; i++) {\r\n\r\n            if (isNaN(parseFloat(chainDigits.charAt(i))) && chainDigits.charAt(i) !== '.') {\r\n\r\n                result.push(parseFloat(chainDigits.slice(j, i)));\r\n                result.push(chainDigits.slice(i, i + 1));\r\n                j = i + 1;\r\n            } else if (i === chainDigits.length - 1) {\r\n                result.push(parseFloat(chainDigits.slice(j, i + 1)));\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    \r\n    const cleanLastOperator = (digits) => {\r\n        if (isNaN(digits[digits.length - 1])) {\r\n            digits.pop();\r\n        }\r\n        return digits;\r\n    };\r\n\r\n    const execPendingOperations = (stackAux = [], stackOperators, total) => {\r\n        let valueOperator;\r\n        let valueNumber;\r\n\r\n        while (stackAux.length > 0) {\r\n            valueOperator = stackOperators[stackOperators.length - 1];\r\n            valueNumber = stackAux[stackAux.length - 1];\r\n\r\n            total = valueOperator === '+' ? valueNumber + total :\r\n                    valueOperator === '-' ? valueNumber - total :\r\n                    valueOperator === 'x' ? valueNumber * total :\r\n                    valueOperator === '/' ? valueNumber / total :\r\n                    total;\r\n\r\n            stackOperators.pop()\r\n            stackAux.pop()\r\n        }\r\n        return total;\r\n    };\r\n\r\n    const amountFormat = (total = 0) => {\r\n\r\n        const rExpresion = /\\B(?=(\\d{3})+(?!\\d))/g;\r\n\r\n        const _amountFormat = (total) => {\r\n            return total.toFixed(2)\r\n                .replace('.', ',')\r\n                .replace(rExpresion, \".\");\r\n        };\r\n\r\n        return _amountFormat(total).includes('e') ? 'error' : _amountFormat(total);\r\n    };\r\n\r\n    const digits = cleanLastOperator(\r\n        formatChainDigitsToArr(\r\n            joinDigitsToString(initialValue)\r\n        ));\r\n\r\n    return calculate(digits);\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Calculator from './Calculator';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <Calculator />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}