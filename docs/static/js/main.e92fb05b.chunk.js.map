{"version":3,"sources":["components/Button.js","components/ButtonRow.js","data.js","components/ButtonTable.js","components/Display.js","Calculator.js","helpers/getResult.js","index.js"],"names":["Button","value","styles","handleSelectButton","className","onClick","ButtonRow","buttons","map","button","key","data","row","values","ButtonTable","rows","Display","initialValue","Calculator","useState","setInitialValue","addOperator","cats","length","e","isNaN","parseInt","target","innerText","arr","join","replaceAll","digits","i","j","parseFloat","charAt","push","slice","pop","calculate","stackOperators","stackAux","total","flag","result","undefined","stOperator","valueOperator","valueNumber","toFixed","replace","includes","getResult","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e92fb05b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Button = ({ value, styles, handleSelectButton }) => {\r\n\r\n    return (\r\n        <>\r\n            <button\r\n                className={styles}\r\n                onClick={handleSelectButton}\r\n            >\r\n                {value}\r\n            </button>\r\n        </>\r\n    )\r\n};\r\n","import React from 'react';\r\n\r\nimport { Button } from \"./Button\";\r\n\r\nexport const ButtonRow = ({ buttons , handleSelectButton}) => {\r\n    \r\n    return (\r\n        <div className=\"button-row\">\r\n            {\r\n                buttons.map((button) => (\r\n                    <Button\r\n                        key={button.value}\r\n                        {...button}\r\n                        handleSelectButton={handleSelectButton}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};","export const data = [\r\n    {\r\n        row: 1,\r\n        values: [\r\n            {\r\n                value: '+',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '-',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: 'x',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '/',\r\n                styles: 'btn'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        row: 2,\r\n        values: [\r\n            {\r\n                value: '7',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '8',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '9',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '=',\r\n                styles: 'btn btn-blue'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        row: 3,\r\n        values: [\r\n            {\r\n                value: '4',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '5',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '6',\r\n                styles: 'btn'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        row: 4,\r\n        values: [\r\n            {\r\n                value: '1',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '2',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: '3',\r\n                styles: 'btn'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        row: 5,\r\n        values: [\r\n            {\r\n                value: '0',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: ',',\r\n                styles: 'btn'\r\n            },\r\n            {\r\n                value: 'AC',\r\n                styles: 'btn btn-red'\r\n            }\r\n        ]\r\n    }\r\n];","import React from 'react';\r\nimport { ButtonRow } from './ButtonRow';\r\nimport { data as rows } from '../data';\r\n\r\nexport const ButtonTable = ({ handleSelectButton }) => {\r\n\r\n    return (\r\n        <div className=\"button-table\">\r\n            {\r\n                rows.map(({ row, values }) => (\r\n                    <ButtonRow\r\n                        key={row}\r\n                        buttons={values}\r\n                        handleSelectButton={handleSelectButton}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\n\r\nexport const Display = ({ initialValue = [0] }) => {\r\n\r\n    return (\r\n        <div className='bg-display'>\r\n            <h1> {initialValue}</h1>\r\n        </div>\r\n    );\r\n};","import React, { useState } from 'react';\r\n\r\nimport { ButtonTable } from './components/ButtonTable';\r\nimport { Display } from './components/Display';\r\nimport { getResult } from './helpers/getResult';\r\n\r\nexport const Calculator = () => {\r\n\r\n    const [initialValue, setInitialValue] = useState([0]);\r\n\r\n    const handleSelectButton = (e) => {\r\n        const value = !isNaN(parseInt(e.target.innerText)) ?\r\n            parseInt(e.target.innerText) :\r\n            e.target.innerText;\r\n\r\n        switch (value) { //step\r\n            case '+':\r\n                addOperator(value);\r\n                break;\r\n            case '-':\r\n                addOperator(value);\r\n                break;\r\n            case 'x':\r\n                addOperator(value);\r\n                break;\r\n            case '/':\r\n                addOperator(value);\r\n                break;\r\n            case '=':\r\n                setInitialValue(getResult(initialValue));\r\n                break;\r\n            case 'AC':\r\n                setInitialValue([0]);\r\n                break;\r\n            case ',':\r\n                addOperator(value);\r\n                break;\r\n            default:\r\n                setInitialValue((cats) => {\r\n                    return cats[0] === 0 ? [parseFloat(value)] : [...cats, parseFloat(value)];\r\n                });\r\n                break;\r\n        }\r\n\r\n    };\r\n\r\n    const addOperator = (value) => {\r\n        setInitialValue((cats) => {\r\n            if (cats[cats.length - 1] === '+' ||\r\n                cats[cats.length - 1] === '-' ||\r\n                cats[cats.length - 1] === 'x' ||\r\n                cats[cats.length - 1] === '/' ||\r\n                cats[cats.length - 1] === ',') return [...cats];\r\n\r\n            return cats[0] === 0 ||\r\n                cats[0] === '+' ||\r\n                cats[0] === '-' ||\r\n                cats[0] === 'x' ||\r\n                cats[0] === '/' ||\r\n                cats[0] === ',' ? [0] : [...cats, value];\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"calculator\">\r\n            <h2>Calculator</h2>\r\n            <Display initialValue={initialValue} />\r\n            <hr />\r\n            <ButtonTable handleSelectButton={handleSelectButton} />\r\n        </div>\r\n    );\r\n\r\n};\r\n","\r\nexport const getResult = (initialValue = []) => {\r\n\r\n    let arr = initialValue.join('')\r\n        .replaceAll('.', '')\r\n        .replaceAll(\",\", \".\");\r\n\r\n    let digits = [];\r\n    for (let i = 0, j = 0; i < arr.length; i++) {\r\n\r\n        if (isNaN(parseFloat(arr.charAt(i))) && arr.charAt(i) !== '.') {\r\n\r\n            digits.push(parseFloat(arr.slice(j, i)));\r\n            digits.push(arr.slice(i, i + 1));\r\n            j = i + 1;\r\n        } else if (i === arr.length - 1) {\r\n            digits.push(parseFloat(arr.slice(j, i + 1)));\r\n        }\r\n    }\r\n\r\n    if (isNaN(digits[digits.length - 1])) {\r\n        digits.pop();\r\n    }\r\n\r\n    const calculate = (digits) => {\r\n        let stackOperators = [];\r\n        let stackAux = [];\r\n        let total = 0;\r\n        let flag = true;\r\n        let result = 0;\r\n        for (let i = 0; i < digits.length; i++) {\r\n            flag = true;\r\n\r\n            if (!isNaN(digits[i])) {\r\n\r\n                if (isNaN(digits[i + 1])) {\r\n                    result = 0;\r\n                    if (digits[i + 1] !== undefined) {\r\n\r\n                        if (stackOperators[stackOperators.length - 1] !== undefined) {\r\n\r\n                            const stOperator = stackOperators[stackOperators.length - 1];\r\n\r\n                            if ((stOperator === '+' || stOperator === '-') && (digits[i + 1] === '+' || digits[i + 1] === '-')) {\r\n\r\n                                if (stOperator === '+') { // step\r\n                                    result = total + digits[i];\r\n                                } else {\r\n                                    result = total - digits[i];\r\n                                }\r\n\r\n                                flag = false;\r\n                                stackOperators.pop();\r\n                            } else {\r\n\r\n                                if (stOperator === 'x' || stOperator === '/') {// step\r\n\r\n                                    if (stOperator === 'x') {\r\n                                        result = total * digits[i];\r\n                                    } else {\r\n                                        result = total / digits[i];\r\n                                    }\r\n\r\n                                    flag = false;\r\n                                    stackOperators.pop();\r\n                                } else {\r\n                                    stackAux.push(total);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        stackOperators.push(digits[i + 1]);\r\n\r\n                        if (flag) { // step\r\n                            total = digits[i];\r\n                        } else {\r\n                            total = result;\r\n                        }\r\n\r\n                        i++;\r\n                        if (digits.length > i) {\r\n                            continue;\r\n                        }\r\n                    } else {\r\n\r\n                        if (digits[i - 1] === '+') {\r\n                            total += digits[i];\r\n                        } else if (digits[i - 1] === '-') {\r\n                            total -= digits[i];\r\n                        } else if (digits[i - 1] === 'x') {\r\n                            total *= digits[i];\r\n                        } else if (digits[i - 1] === '/') {\r\n                            total /= digits[i];\r\n                        }\r\n                        stackOperators.pop();\r\n                    }\r\n\r\n                    let valueOperator;\r\n                    let valueNumber;\r\n                    while (stackAux.length > 0) { // step\r\n                        valueOperator = stackOperators[stackOperators.length - 1];\r\n                        valueNumber = stackAux[stackAux.length - 1];\r\n\r\n                        if (valueOperator === '+') {\r\n                            total = valueNumber + total;\r\n                        } else if (valueOperator === '-') {\r\n                            total = valueNumber - total;\r\n                        } else if (valueOperator === 'x') {\r\n                            total = valueNumber * total;\r\n                        } else if (valueOperator === '/') {\r\n                            total = valueNumber / total;\r\n                        }\r\n\r\n                        stackOperators.pop()\r\n                        stackAux.pop()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return [\r\n            total.toFixed(2).replace('.', ',').replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\").includes('e') ?\r\n                'error' :\r\n                total.toFixed(2).replace('.', ',').replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\")\r\n        ];\r\n    }\r\n\r\n    return calculate(digits);\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Calculator } from './Calculator';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <Calculator />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}